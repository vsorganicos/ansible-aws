---
 - name: find right AMI
   ec2_ami_find:
     region: "{{ ec2_ami.region }}"
     profile: "{{ ec2_ami.profile }}"
     is_public: "{{ ec2_ami.is_public }}"
     no_result_action: "{{ ec2_ami.no_result_action }}"
     sort: "{{ ec2_ami.sort }}"
     sort_order: "{{ ec2_ami.sort_order }}"
     virtualization_type: "{{ ec2_ami.virtualization_type }}"
     architecture: "{{ ec2_ami.architecture }}"
     platform: "{{ ec2_ami.platform }}"
   register: ec2_ami_instance_facts

 - name: debug available AMIs
   debug: 'msg="{{ ec2_ami_instance_facts }}"'

 - name: provisioning ec2 instances
   ec2:
     region: "{{ item.region }}"
     profile: "{{ item.profile }}"
     key_name: "{{ item.key_name }}"
     instance_type: "{{ item.instance_type }}"
     image: "ami-97831ffb"
     wait: "{{ item.wait }}"
     state: present
     vpc_subnet_id: "{{ item.vpc_subnet_id }}"
     assign_public_ip: "{{ item.assign_public_ip }}"
     termination_protection: "{{ item.termination_protection }}"
     monitoring: "{{ item.monitoring }}"
     group: "{{ item.group }}"
     instance_tags: "{{ item.instance_tags }}"
     volumes: "{{ item.volumes }}"
     wait_timeout: 180
   with_items:
     - "{{ ec2_instance }}"
   when: create_ec2_instances=="yes"|default(False)
   register: ec2_create_instance_facts

 - name: debug ec2_create_instance_facts
   debug: 'msg="{{ ec2_create_instance_facts }}"'

 - name: terminate ec2 instances
   ec2:
     state: absent
     region: "{{ item.region }}"
     profile: "{{ item.profile }}"
     instance_ids: "i-0c1ec889ed9c896d2" #"{{ ec2_create_instance_facts.results[0].instance_ids[0] }}"
     wait: yes
     wait_timeout: 180
   with_items:
     - "{{ ec2_instance }}"
   when: terminate_ec2_instances=="yes"|default(True)
